#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to convert integer and fractional part to binary
void decimalToBinary(float num, char* binary, int* exponent) {
int intPart = (int)num;
float fracPart = num - intPart;

printf("Step 1: Binary Representation of %.3f: ", num);  
  
// Convert integer part to binary  
int binaryInt[32], i = 0;  
while (intPart > 0) {  
    binaryInt[i++] = intPart % 2;  
    intPart /= 2;  
}  
  
// Print integer binary  
for (int j = i - 1; j >= 0; j--) {  
    printf("%d", binaryInt[j]);  
}  
  
// Convert fractional part  
if (fracPart > 0) {  
    printf(".");  
    for (int k = 0; k < 10; k++) { // 10-bit precision for fraction  
        fracPart *= 2;  
        int bit = (int)fracPart;  
        printf("%d", bit);  
        fracPart -= bit;  
        if (fracPart == 0) break;  
    }  
}  
printf("\n");  
  
// Normalization Step  
*exponent = i - 1;  
binary[0] = '1';  
binary[1] = '.';  
int index = 2;  
  
for (int j = i - 2; j >= 0; j--) {  
    binary[index++] = binaryInt[j] + '0';  
}  
  
if (fracPart > 0) {  
    for (int k = 0; k < 10; k++) {  
        fracPart *= 2;  
        int bit = (int)fracPart;  
        binary[index++] = bit + '0';  
        fracPart -= bit;  
        if (fracPart == 0) break;  
    }  
}  
binary[index] = '\0';  
  
printf("Step 2: Normalized Form: %s Ã— 2^%d\n", binary, *exponent);  
int biasExponent = 127 + *exponent;  
printf("Step 3: Bias Exponent Calculation: 127 + %d = %d\n", *exponent, biasExponent);  
  
// Convert bias exponent to binary  
printf("Step 4: Binary Representation of Bias Exponent: ");  
for (int j = 7; j >= 0; j--) {  
    printf("%d", (biasExponent >> j) & 1);  
}  
printf("\n");

}

// Function to convert float to 32-bit IEEE 754 binary representation
void floatToBinary(float value, char* bin) {
union {
float f;
unsigned int i;
} conv;
conv.f = value;

for (int j = 31; j >= 0; j--) {  
    bin[31 - j] = ((conv.i >> j) & 1) ? '1' : '0';  
}  
bin[32] = '\0';  
printf("Step 5: 32-bit IEEE 754 Representation: %s\n", bin);

}

// Function to extract exponent and mantissa and convert them to hexadecimal
void getExponentMantissa(const char* bin, char* hexOut) {
char expPart[9], mantissaPart[24];

for (int k = 1; k <= 8; k++) {  
    expPart[k - 1] = bin[k];  
}  
expPart[8] = '\0';  

for (int k = 9; k < 32; k++) {  
    mantissaPart[k - 9] = bin[k];  
}  
mantissaPart[23] = '\0';  

int expDecimal = strtol(expPart, NULL, 2);  
unsigned int mantDecimal = strtol(mantissaPart, NULL, 2);  

sprintf(hexOut, "%02X%06X", expDecimal, mantDecimal);  
printf("Step 6: Hexadecimal Representation: %s\n", hexOut);

}

int main() {
float inputNum;
printf("Enter a decimal number: ");
scanf("%f", &inputNum);

char binaryRep[33], hexRep[9], normalisedBinary[32];  
int exponent;  

// Convert and display binary representation & normalization  
decimalToBinary(inputNum, normalisedBinary, &exponent);  

floatToBinary(inputNum, binaryRep);  

getExponentMantissa(binaryRep, hexRep);  

return 0;

}



